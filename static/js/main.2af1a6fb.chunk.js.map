{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","style","color","heading","value","onChange","e","target","backgroundColor","rows","newText","toUpperCase","console","log","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","length","Alert","alert","class","role","word","lower","charAt","slice","capitalize","msg","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.2af1a6fb.chunk.js","sourcesContent":["import React from 'react';\r\n// import { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" href=\"/about\">About</a>\r\n        </li> */}\r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n            <div className={`form-check form-switch text-${props.mode === 'light'? 'dark':'light'}`}>\r\n        <input className=\"form-check-input\" type=\"checkbox\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n\r\n  const [text, setText] = useState(\"\");\r\n\r\n  const handleUpClick = () => {\r\n    let newText = text.toUpperCase();\r\n    console.log(newText);\r\n    setText(newText);\r\n    props.showAlert(\"Converted to uppercase!\", \"success\");\r\n  }\r\n\r\n  const handleOnChange = (e) => {\r\n    setText(e.target.value);\r\n  }\r\n\r\n  const handleLowClick = () => {\r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to lowercase!\", \"success\");\r\n  }\r\n\r\n  const handleClearClick = () => {\r\n    let newText = \"\";\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared!\", \"success\");\r\n  }\r\n\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text copied!\", \"success\");\r\n  }\r\n\r\n  const handleExtraSpaces = () => {\r\n    let newText = text.split(/[ ]+/);\r\n    setText(newText.join(\" \"));\r\n    props.showAlert(\"Extra spaces removed!\", \"success\");\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n          <div className=\"container\" style={{color: props.mode==='light'?'black':'white'}}>\r\n          <h1>{props.heading}</h1>\r\n            <div className=\"mb-3\">\r\n              <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" style={{backgroundColor: props.mode==='light'?'white':'grey', color: props.mode==='light'?'black':'white'}} rows=\"8\"></textarea>\r\n            </div>\r\n            <button onClick={handleUpClick} className=\"btn btn-primary mx-1\">Convert To Uppercase</button>\r\n            <button onClick={handleLowClick} className=\"btn btn-primary mx-1\">Convert To Lowercase</button>\r\n            <button onClick={handleClearClick} className=\"btn btn-primary mx-1\">Clear Text</button>\r\n            <button onClick={handleCopy} className=\"btn btn-primary mx-1\">Copy Text</button>\r\n            <button onClick={handleExtraSpaces} className=\"btn btn-primary mx-1\">Remove Extra Spaces</button>\r\n        </div>\r\n\r\n        <div className=\"container my-3\" style={{ color: props.mode==='light'?'black':'white'}}>\r\n          <h2>Your Summary</h2>\r\n          <p>{text.split(\" \").length} words, {text.length} characters</p>\r\n          <p>{0.008 * text.split(\" \").length} minutes to read</p>\r\n          <h2>Preview</h2>\r\n          <p>{text.length>0?text:\"Enter your text above in inbox to analyze\"}</p>\r\n        </div>\r\n    </>\r\n  )\r\n}\r\n","import React from 'react';\r\n\r\nexport default function Alert(props) {\r\n\r\n\r\n  const capitalize = (word) => {\r\n    let lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n\r\n\r\n  return (\r\n    props.alert && <div>\r\n      <div class={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n          <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n","\nimport './App.css';\n// import About from './components/About';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport React, { useState } from 'react';\nimport Alert from './components/Alert';\n// import {\n//   BrowserRouter as Router,\n//   Switch,\n//   Route,\n//   Link\n// } from \"react-router-dom\";\n\n\nfunction App() {\n\n  const [ mode, setMode ] = useState('light');\n  const [ alert, setAlert  ] = useState(null);\n\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n\n    setTimeout(() => {\n      setAlert(null);\n    }, 2000);\n  }\n\n  const toggleMode = () => {\n    if(mode === 'light'){\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark Mode is Enabled\", \"success\");\n    }else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light Mode is Enabled\", \"success\");\n    }\n  }\n\n  return (\n    <>\n    {/* <Router> */}\n    <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert} />\n    <div className=\"container my-3\">\n        {/* <Switch>\n          <Route path=\"/about\">\n            <About />\n          </Route> */}\n          {/* <Route path=\"/\"> */}\n          <TextForm heading=\"Enter Text to Analyze\" mode={mode} showAlert={showAlert}/>\n          {/* </Route>\n        </Switch> */}\n    </div>\n    {/* </Router> */}\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}